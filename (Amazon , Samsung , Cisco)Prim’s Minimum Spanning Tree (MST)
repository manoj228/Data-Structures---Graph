
#include <bits/stdc++.h>
using namespace std;
#define V 5

int minKey(int key[],bool mstSet[])
{
    int min = INT_MAX , minIndex ;
    
    for(int i=0; i< V;i++)
    if(min > key[i] && !mstSet[i])
    min = key[i] , minIndex = i;
    
    return minIndex;
}

void printMst(int parent[],int graph[][V])
{
    for(int i=1;i<V;i++)
    cout << parent[i] << "-" << i << " " << graph[i][parent[i]] << endl;
}

void primMST(int graph[V][V])  
{  
    // Array to store constructed MST  
    int parent[V];  
      
    // Key values used to pick minimum weight edge in cut  
    int key[V];  
      
    // To represent set of vertices not yet included in MST  
    bool mstSet[V];  
  
    // Initialize all keys as INFINITE  
    for (int i = 0; i < V; i++)  
        key[i] = INT_MAX, mstSet[i] = false;  
  
    key[0] = 0;  
    parent[0] = -1; // First node is always root of MST  
 
    for(int count = 0; count < V - 1; count++) 
    {  
        // set of vertices not yet included in MST  
        int u = minKey(key, mstSet);  
  
        // Add the picked vertex to the MST Set  
        mstSet[u] = true;  
  
        for(int v = 0; v < V; v++)  
        if(graph[u][v] && !mstSet[v] && graph[u][v] < key[v])  
        parent[v] = u, key[v] = graph[u][v];  
    }  
  
    // print the constructed MST  
    printMst(parent, graph);  
}  

int main()
{
    int graph[V][V] = { { 0, 2, 0, 6, 0 },  
                        { 2, 0, 3, 8, 5 },  
                        { 0, 3, 0, 0, 7 },  
                        { 6, 8, 0, 0, 9 },  
                        { 0, 5, 7, 9, 0 } };  
  
    primMST(graph);  

    return 0;
}
