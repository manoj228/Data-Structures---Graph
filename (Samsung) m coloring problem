
#include <bits/stdc++.h>
using namespace std;
#define V 4 

int isColorable(int graph[][V],int color[],int c,int v)
{
    for(int i=0;i<V;i++)
    {
        if(graph[v][i] && c == color[i])
        return 0;
    }
    
    return 1;
}

int solve(int graph[][V],int m,int color[],int v)
{
    //if all the vertices are colored 
    if(v == V) 
    return 1;
    
    for(int c = 1 ; c <= m ; c++)
    {
        if(isColorable(graph,color,c,v))
       { 
           color[v] = c;
           
           //recursion for other vertices
           if(solve(graph,m,color,v+1))
           return 1;
           
           //it doesnot leads to Solution , backtrack 
           color[v] = 0;
       }
        
    }
    
    return 0;
}

void printSolutiion(int color[])
{
    for(int i=0;i<V;i++)
    printf("%d ",color[i]);
}

int main()
{
    int graph[V][V] = {{0, 1, 1, 1}, 
                       {1, 0, 1, 0}, 
                       {1, 1, 0, 1}, 
                       {1, 0, 1, 0}}; 
    int m = 3; // Number of colors 
    
    int color[V];
    
    for(int i=0;i<V;i++)
    color[i] = 0;
    
    if(!solve(graph,m,color,0))
    {
        printf("Solution doesnot exist\n");
        return 0;
    }
    
    printSolutiion(color);
    return 0;
}
