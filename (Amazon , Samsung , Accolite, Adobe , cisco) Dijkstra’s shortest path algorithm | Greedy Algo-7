
#include <bits/stdc++.h>
using namespace std;
#define V 9

int minDistance(bool sptSet[],int dis[])
{
    int minIndex , min = INT_MAX;
    for(int i=0;i<V;i++)
    if(!sptSet[i] && dis[i] <= min)
    min = dis[i] , minIndex = i;
    
    return minIndex;
}

void printSolution(int dis[])
{
    for(int i=0;i<V;i++)
    printf("%d %d\n",i,dis[i]);
}

void dijkstra(int graph[][V],int src)
{
    int dis[V] ; 
    
    bool sptSet[V];
    
    for(int i=0;i<V;i++)
    dis[i] = INT_MAX , sptSet[i] = false;
    
    dis[src] = 0;
    
    for(int i=0;i<V-1;i++)
    {
        int u = minDistance(sptSet , dis);
        
        sptSet[u] = true;
        
        for(int j = 0 ; j < V ; j++)
        {
            if(graph[u][j] && !sptSet[j] && dis[u] + graph[u][j] < dis[j])
            dis[j] = graph[u][j] + dis[u];
        }
    }
    
    printSolution(dis);
}

int main()
{
    int graph[V][V] = { { 0, 4, 0, 0, 0, 0, 0, 8, 0 }, 
                        { 4, 0, 8, 0, 0, 0, 0, 11, 0 }, 
                        { 0, 8, 0, 7, 0, 4, 0, 0, 2 }, 
                        { 0, 0, 7, 0, 9, 14, 0, 0, 0 }, 
                        { 0, 0, 0, 9, 0, 10, 0, 0, 0 }, 
                        { 0, 0, 4, 14, 10, 0, 2, 0, 0 }, 
                        { 0, 0, 0, 0, 0, 2, 0, 1, 6 }, 
                        { 8, 11, 0, 0, 0, 0, 1, 0, 7 }, 
                        { 0, 0, 2, 0, 0, 0, 6, 7, 0 } }; 
  
    dijkstra(graph, 0); 
   

    return 0;
}
