//Time Complexity : O(n)
#include <bits/stdc++.h>
using namespace std;
#define MAX 10001

int intime[MAX] , outTime[MAX];
bool vis[MAX] = {0};
int timer = 0;

void dfs(vector<int> graph[],int v)
{
    vis[v] = true; 
    ++timer;
    intime[v] = timer;
    
    vector<int>::iterator it = graph[v].begin();
    
    while(it != graph[v].end())
    {
        if(vis[*it] == false)
        dfs(graph,*it);
        
        it++;
    }
    
    ++timer;
    outTime[v] = timer;
}

int query(int u,int v)
{
    /*
     Intime â€“ When we visit the node for the first time

    Outtime- If we again visit the node later but there is no children unvisited we call it outtime,
    */
    return ((intime[u] < intime[v] && outTime[u] > outTime[v]) || 
            (intime[v] < intime[u] && outTime[v] > outTime[u]));
}
int main()
{
    int n=9;
    vector<int> graph[n+1];
    graph[1].push_back(2); 
    graph[1].push_back(3); 
    graph[3].push_back(6); 
    graph[2].push_back(4); 
    graph[2].push_back(5); 
    graph[5].push_back(7); 
    graph[5].push_back(8); 
    graph[5].push_back(9); 
  
    dfs(graph,1);
    
    query(1,5) ? cout << "Yes" : cout << "No";
    
    return 0;
}
