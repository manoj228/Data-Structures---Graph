//Graph representation using unordered_set(hashing)
#include <bits/stdc++.h>
using namespace std;

struct Graph
{
    int d;
    unordered_set<int> *adj;
};

Graph *createGraph(int v)
{
    Graph *g = new Graph;
    g->d = v;
    g->adj = new unordered_set<int>[v];
    
    return g;
}

void addEdge(Graph *g,int s,int d)
{
    g -> adj[s].insert(d);
    g -> adj[d].insert(s);
}

void printGraph(Graph *g)
{
    for(int i=0;i<g->d;i++)
    {
        unordered_set<int> lst = g ->adj[i];
        printf("For vertex %d\n",i);
        for(auto it = lst .begin() ; it != lst.end() ; it++)
        printf("%d ",*it);
        printf("\n");
    }
}

void searchEdge(Graph *g,int s,int d)
{
    auto it = g -> adj[s].find(d);
    if(it == g->adj[s].end())
    printf("Not found");
    else
    {
        printf("Found from %d  to %d",s,d);
    }
}
int main()
{
    struct Graph *graph = createGraph(5);
    addEdge(graph, 0, 1); 
    addEdge(graph, 0, 4); 
    addEdge(graph, 1, 2); 
    addEdge(graph, 1, 3); 
    addEdge(graph, 1, 4); 
    addEdge(graph, 2, 3); 
    addEdge(graph, 3, 4); 
    
    printGraph(graph); 
    
    searchEdge(graph, 2, 1); 


    return 0;
}
