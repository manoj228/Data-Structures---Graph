
#include <bits/stdc++.h>
using namespace std;

class Graph
{
    int v ;           // no of vertices 
    list<int> *adj;  // for adjacency 
    
    public:
    Graph(int vertices);
    void addEdge(int v,int w);
    void bfs(int s);
};

Graph :: Graph(int vertices)
{
    v = vertices;
    adj = new list<int>[v];
}

void Graph :: addEdge(int v,int w)
{
    adj[v].push_back(w);
}

void Graph :: bfs(int s)
{
  bool *vis = new bool[v];
  for(int i=0;i<v;i++)
  vis[i] = false;
  
  list<int> q; 
  list<int>::iterator it;
  
  vis[s]= true;
  q.push_back(s);
  
  while(!q.empty())
  {
   s = q.front();
   q.pop_front();
   
   cout << s << " ";
   
   for(it=adj[s].begin();it!=adj[s].end();it++)
   {
       if(!vis[*it])
       {
           vis[*it]= true;
           q.push_back(*it);
       }
   }
  }
  
}

int main()
{
    Graph g(4);
    g.addEdge(0, 1); 
    g.addEdge(0, 2); 
    g.addEdge(1, 2); 
    g.addEdge(2, 0); 
    g.addEdge(2, 3); 
    g.addEdge(3, 3); 

    g.bfs(2);

    return 0;
}
