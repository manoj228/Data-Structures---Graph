
#include <bits/stdc++.h>
using namespace std;

void add_edge(vector<int> adj[],int src,int dest)
{
    adj[src].push_back(dest);
    adj[dest].push_back(src);
}

bool bfs(vector<int> adj[],int src,int dest,int v,int pred[],int dist[])
{
    bool vis[v];
    
    for(int i=0;i<v;i++)
    {
        vis[i] = false;
        pred[i] = -1;
        dist[i] = INT_MAX;
    }
    
    list<int> queue;
    
    dist[src] = 0;
    vis[src] = true;
    queue.push_back(src);
    
    while(!queue.empty())
    {
        int u = queue.front();
        queue.pop_front();
        for(int i = 0 ; i<adj[u].size();i++)
        {
            if(!vis[adj[u][i]])
            {
                vis[adj[u][i]] = true;
                pred[adj[u][i]] = u;
                dist[adj[u][i]] = dist[u]+1;
                
                queue.push_back(adj[u][i]);
            }
            
            if(adj[u][i] == dest)
            return true;
        }
    }
    
    return false;
}


void printShortestDistance(vector<int> adj[],int src,int dest,int v)
{
    int pred[v],dist[v];
    
    if(!bfs(adj,src,dest,v,pred,dist))
    {
        printf("Not exist"); return;
    }
    
    
    //stores shortest path
    int crawl = dest;
    vector<int> path;
    path.push_back(crawl);
    
    while(pred[crawl] != -1)
    {
        path.push_back(pred[crawl]);
        crawl = pred[crawl];
    }
    
    printf("Shortest Path length is %d\n",dist[dest]);
    cout << "Path" << "\n";
    for(int i = path.size() - 1 ; i >= 0 ; i--)
    cout << path[i] << " ";
    
}

int main()
{
    int v = 8 ;
    vector<int> adj[v];
    
    add_edge(adj, 0, 1); 
    add_edge(adj, 0, 3); 
    add_edge(adj, 1, 2); 
    add_edge(adj, 3, 4); 
    add_edge(adj, 3, 7); 
    add_edge(adj, 4, 5); 
    add_edge(adj, 4, 6); 
    add_edge(adj, 4, 7); 
    add_edge(adj, 5, 6); 
    add_edge(adj, 6, 7); 
    int source = 0, dest = 7; 
    printShortestDistance(adj, source, dest, v);
    
    return 0;
}
