
#include <bits/stdc++.h>
using namespace std;

class Graph
{
  int V;
  list<int> *adj;
  public:
  Graph(int v);
  void addEdge(int u,int v);
  int isCyclic();
  int isCyclicUtil(int i,bool vis[],bool recStack[]);
};

Graph :: Graph(int v)
{
    this -> V = v;
    adj = new list<int>[V];
}

void Graph::addEdge(int u,int v)
{
    adj[u].push_back(v);
}

int Graph :: isCyclicUtil(int i,bool vis[],bool *recStack)
{
    if(!vis[i])
    {
    vis[i]=true ;
    recStack[i] =true;
    
    list<int>::iterator it;
    for(it = adj[i].begin() ; it != adj[i].end() ; it++)
    if(!vis[*it] && isCyclicUtil(*it,vis,recStack))
    return true;
    else if(recStack[*it])
    return true;
    }
    
    return false;
}

int Graph :: isCyclic()
{
    bool *vis = new bool[V];
    bool *recStack = new bool[V];
    
    for(int i=0;i<V;i++)
    {
        vis[i] = false;
        recStack[i] = false;
    }
    
    for(int i=0;i<V;i++)
    {
        if(isCyclicUtil(i,vis,recStack))
        return true;
    }
    
    return false;
}
int main()
{
    Graph g(4); 
    g.addEdge(0, 1); 
    g.addEdge(0, 2); 
    g.addEdge(1, 2); 
    g.addEdge(2, 0); 
    g.addEdge(2, 3); 
    g.addEdge(3, 3); 
  
    if(g.isCyclic()) 
    cout << "Cycle found";
    else
    cout << "No Cycle found";
    
    return 0;
}

