//undirected Graph
#include <bits/stdc++.h>
using namespace std;

class Graph 
{
    int V;
    list<int> *adj;
    
public:
    Graph(int v);
    void addEdge(int u,int v);
    int isCyclic();
    int isCyclicUtil(int i,bool vis[],int parent);
};

Graph :: Graph(int v)
{
    this -> V = v;
    adj = new list<int>[V];
}

void Graph :: addEdge(int u,int v)
{
    adj[u].push_back(v);
    adj[v].push_back(u);
}

int Graph :: isCyclicUtil(int v,bool vis[],int parent)
{
    vis[v] = true;
    
    list<int>::iterator it ;
    for(it = adj[v].begin();it!=adj[v].end();it++)
    {
    if(!vis[*it] && isCyclicUtil(*it,vis,v))
    return true;
    
    //if adjacent element is visited and not parent of current vertex , then there is cycle
    else if(*it != parent)
    return true;
    }
    
    return false;
}

int Graph :: isCyclic()
{
    bool *vis = new bool[V];
    for(int i=0;i<V;i++)
    vis[i] = false;
    
    for(int i=0;i<V;i++)
    {
        if(!vis[i] && isCyclicUtil(i,vis,-1))
        return true;
    }
    return false;
}

int main()
{
    Graph g1(5); 
    g1.addEdge(1, 0); 
    g1.addEdge(0, 2); 
    g1.addEdge(2, 1); 
    g1.addEdge(0, 3); 
    g1.addEdge(3, 4); 
    g1.isCyclic() ? cout << "Graph contains cycle\n" : cout << "Graph doesn't contain cycle\n"; 
  

    return 0;
}
